@{
    ViewBag.Title = "Data Tables Bindings";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link href="/Content/DataTables-1.8.2/media/css/demo_table_jui.css" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/DataTables-1.8.2/media/js/jquery.dataTables.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/knockout.bindings.dataTables.js")" type="text/javascript"></script>
<style type="text/css">

.sample .table, .sample table
{
    width:800px;
    
}

</style>
<script type="text/javascript">

    function Record(Id, Column1, Column2, Column3) {
        this.Id = Id;
        this.Column1 = ko.observable(Column1);
        this.Column2 = ko.observable(Column2);
        this.Column3 = ko.observable(Column3);
        this.IsSelected = ko.observable(false);
    }

    function ViewModel() {

        var cellCounter = 0;
        var idCounter = 0;
        var vm = this;

        this.selectAll = ko.observable(false);

        this.editable = ko.observable(true);

        this.toggleEdit = function () {
            vm.editable(!vm.editable());
        }

        this.data = ko.observableArray([
                    CreateRecord(),
                    CreateRecord(),
                    CreateRecord(),
                    CreateRecord()
                ]);

        this.getData = function (options, callback) {
            $.ajax({
                url: '/Demo/DataTables',
                data: ko.toJSON(options),
                type: "POST",
                contentType: "application/json charset=utf-8",
                dataType: "json",
                success: function (responseData, textStatus, jqXHR) {
                    callback(responseData);
                }
            });
        }

        this.refreshAjax = function () {
            var table = ko.bindingHandlers.dataTable.getDataTableInstance($("#sample3 table")[0]);
            table.fnDraw();
        }

        // Demonstrates the ability to post process rows rendered by DataTables so you can add your own effects.
        this.onRowCallback = function (row, data, displayIndex, displayIndexFull) {

            // If the row is decorated with the "odd" class, change the text data in the row to red.
            if ($(row).is(".odd")) {
                return $(row).css("color", "red")[0];
            }

            return row;
        }

        this.json = ko.dependentObservable(function () {
            return ko.toJSON(this.data);
        }, this);

        this.selectAll.subscribe(function (isSelected) {
            $.each(vm.data(), function (i, item) {
                item.IsSelected(isSelected);
            });
        });

        this.addItem = function () {
            this.data.push(CreateRecord());
        }

        this.removeLastItem = function () {
            this.data.pop();
        }

        this.removeItem = function (item) {
            // Issue: DataTables is copying the dataSource of the data table internally, so an attempt to remove by instance here wont work.
            // Unfortunately we have to match by key here currently...
            //            this.data.remove(item);
            this.data.remove(function (item2) { return item.Id == item2.Id; });
        }

        function CreateRecord() {
            return new Record(++idCounter, "cell " + ++cellCounter, "cell " + ++cellCounter, "cell " + ++cellCounter);
        }
    };

</script>
<h1>Data Tables Demo</h1>
<!-- Sample 1: Basic Data Table -->
<div Id="sample1" class="sample">
    <h1>Sample1: Basic Data Table</h1>
    <p class="description">
        This example demonstrates a basic data table using a knockout observable array as a data source.  
        Using the Add and Remove links will add and remove items to the table's data source, and in turn will
        add and remove rows in the data table.  This shows that each row in the table is bound to each item in the
        array data source.
    </p>
    <div class="table">
        <a data-bind="click: addItem">Add</a>
        <a data-bind="click: removeLastItem">Remove</a>
        <br /><br />
        <table data-bind="dataTable: { 
            dataSource: data, 
            columns: [
                'Column1', 
                'Column2', 
                'Column3', 
                { mDataProp: 'IsSelected', bSortable: false }
            ],
            options: {
                fnRowCallback: onRowCallback
            }
        }">
            <thead>
                <tr>
                    <td>Column 1</td>
                    <td>Column 2</td>
                    <td>Column 3</td>
                    <td>Select All <input type="checkbox" name="chkSelectAll" data-bind="checked: selectAll"  /></td>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>
    <h2>Array Data Source</h2>
    <div data-bind="text: json"></div>
</div>
<script type="text/javascript">

    var vm1 = new ViewModel();

    $(function ()
    {
        ko.applyBindings(vm1, $("#sample1")[0]);
    });

</script>

<!-- Sample 2: Editable Data Table with Row Template -->
<div Id="sample2" class="sample">
    <h1> Sample 2: Editable Data Table with Row Template</h1>
    <p class="description">
        This demonstration is the same as Sample 1, except for the following:
        <ul>
            <li>A jQuery template is used by the table to print each row.</li>
            <li>You are able to edit the values of each cell which demonstrates how each cell is bound back to an item property in the array data source.</li>
            <li>You can remove a specific row in the table demonstrating the link between the table's rows and the items in the array data source.</li>
        </ul>
    </p>
    <div class="table">
        <a data-bind="click: addItem">Add</a>
        <a data-bind="click: toggleEdit">Toggle Edit</a>
        <br /><br />
        <table data-bind="dataTable: { 
            dataSource: data, 
            rowTemplate: 'sample2RowTemplate', 
            columns: [
                'Column1', 
                'Column2', 
                'Column3', 
                { mDataProp: 'IsSelected', bSortable: false }
            ] 
        }">
            <thead>
                <tr>
                    <td>Column 1</td>
                    <td>Column 2</td>
                    <td>Column 3</td>
                    <td>Select All <input type="checkbox" name="chkSelectAll" data-bind="checked: selectAll"  /></td>
                    <td></td>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>
    <h2>Array Data Source</h2>
    <div data-bind="text: json"></div>
</div>
<script id="sample2RowTemplate" type="text/html">
    <td><input type="text" data-bind="value: Column1, valueUpdate:'keypress', enable: $root.editable()" /></td>
    <td><input type="text" data-bind="value: Column2, valueUpdate:'keypress', enable: $root.editable()" /></td>
    <td><input type="text" data-bind="value: Column3, valueUpdate:'keypress', enable: $root.editable()" /></td>
    <td><input type="checkbox" data-bind="checked: IsSelected"  /></td>
    <td><a data-bind="click: function() { vm2.removeItem($data); }">Remove</a></td>
</script>
<script type="text/javascript">

    var vm2 = new ViewModel();

    $(function () {
        ko.applyBindings(vm2, $("#sample2")[0]);
    });

</script>


<!-- Sample 3: Editable Data Table with Row Template and AJAX data source -->
<div Id="sample3" class="sample">
    <h1> Sample 3: Editable Data Table with Row Template and AJAX data source</h1>
    <p class="description">
        This demonstration is the same as Sample 2, except it uses an AJAX datasource instead of an Array datasource.  This shows how the Knockout DataTables adapter
        can support server side processing of paging, sorting, searching, and retrieval of data.
    </p>
    <p>
        Need to implement:
        <ul>
            <li>Add</li>
            <li>Remove</li>
            <li>Edit & Save</li>
            <li>Cancel perhaps...</li>
            <li>Read Only mode perhaps...</li>
        </ul>
    </p>
    <div class="table">
        @*<a data-bind="click: addItem">Add</a>*@
        <br /><br />
        <a data-bind="click: toggleEdit">Toggle Edit</a>
        <a data-bind="click: refreshAjax">Refresh Table</a>
        <table data-bind="dataTable: { 
            dataSource: getData, 
            rowTemplate: 'sample3RowTemplate', 
            columns: [
                'Column1', 
                'Column2', 
                'Column3'
            ] 
        }">
            <thead>
                <tr>
                    <td>Column 1</td>
                    <td>Column 2</td>
                    <td>Column 3</td>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>
</div>
<script Id="sample3RowTemplate" type="text/html">
    <td><input type="text" data-bind="value: Column1, valueUpdate:'keypress', enable: $root.editable()" /></td>
    <td><input type="text" data-bind="value: Column2, valueUpdate:'keypress', enable: $root.editable()" /></td>
    <td><input type="text" data-bind="value: Column3, valueUpdate:'keypress', enable: $root.editable()" /></td>
    @*<td><a data-bind="click: function() { vm2.removeItem($data); }">Remove</a></td>*@
</script>
<script type="text/javascript">

    var vm3 = new ViewModel();

    $(function () {
        ko.applyBindings(vm3, $("#sample3")[0]);
    });

</script>



@*
<h3>Defined Row Template</h3>
<table data-bind="dataTable: { rowTemplate: 'rowTemplate', dataSource: tableRecords, columns: ['Column1', 'Column2', 'Column3'], options: tableOptions }">
    <thead>
        <tr>
            <td>Column 1</td>
            <td>Column 2</td>
            <td>Column 3</td>
        </tr>
    </thead>
    <tbody>
    </tbody>
</table>*@



@if (false)
{
    <script src="/Scripts/jquery-1.5.1.min.js" type="text/javascript"></script>
    <script src="/Scripts/modernizr-1.7.min.js" type="text/javascript"></script>
    <script src="/Scripts/knockout-2.1.0.debug.js" type="text/javascript"></script>
    <script src="/Scripts/knockout.mapping-latest.debug.js" type="text/javascript"></script>
    <script src="/Scripts/knockout.bindings.dataTables.js" type="text/javascript"></script>
    <script src="/Scripts/DataTables-1.8.2/media/js/jquery.dataTables.js" type="text/javascript"></script>
}
