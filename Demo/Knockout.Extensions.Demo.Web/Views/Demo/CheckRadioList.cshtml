@{
    ViewBag.Title = "CheckRadioList";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script src='@Url.Content("~/Scripts/ko.bindings.radiochecklist.js")' type="text/javascript"></script>
<style type="text/css">
    
    .cog-radiolist, .cog-checklist
    {
        width: 300px;
        display:inline-block;
    }

    .cog-radiolist ul, .cog-checklist ul
    {
        margin:0px;
        padding:0px;
        list-style-type:none;
    }

    .cog-radiolist li, .cog-checklist li
    {
        padding:3px 0; /*removes in Firefox/Mozilla*/
        margin:3px 0; /*removes in IE & Opera*/
        display:inline-block;
    }

</style>

<h1>Check Box List and Radio Button List Demo</h1>
    <div class="sample">
<!-- ko with: fields -->
        <h2>Check Box List</h2>
        <p>
            <p class="description">This example demonstrates binding the Check Box List control to a simple options array of strings.</p>
            <input type="checkbox" data-bind="selectedOptions: checkBoxList1, options: vm.simpleListItems" />
        </p>
        <p>
            <p class="description">This example demonstrates binding the Check Box List control to an options array of complex objects where the "Text" and "Value" fields need to be specified.</p>
            <input type="checkbox" data-bind="selectedOptions: checkBoxList2, options: vm.complexListItems, optionsText: 'text', optionsValue: 'value'" />
        </p>
        <h2>Radio Button List</h2>
        <p>
            <p class="description">This example demonstrates binding the Radio Button List control to a simple options array of strings.</p>
            <input type="radio" data-bind="value: radioButtonList1, options: vm.simpleListItems" />
        </p>
        <p>
            <p class="description">This example demonstrates binding the Radio Button List control to an options array of complex objects where the "Text" and "Value" fields need to be specified.</p>
            <input type="radio" data-bind="value: radioButtonList2, options: vm.complexListItems, optionsText: 'text', optionsValue: 'value'" />@**@
        </p>
<!-- /ko -->
    <h2>View Model</h2>
    <div data-bind="text: json"></div>
</div>


<script type="text/javascript">

    var vm = new function () {

        // options observables
        this.simpleListItems = ko.observableArray([
            ko.observable("Cat"),
            ko.observable("Dog"),
            ko.observable("Mouse"),
            ko.observable("Elephant")
        ]);

        this.complexListItems = ko.observableArray([
            createComplexListItem("Cat", "1"),
            createComplexListItem("Dog", "2"),
            createComplexListItem("Mouse", "3"),
            createComplexListItem("Elephant", "4")
        ]);

        // selected options observables
        this.fields = {
            checkBoxList1: ko.observableArray([]),
            checkBoxList2: ko.observableArray([]),
            radioButtonList1: ko.observable(),
            radioButtonList2: ko.observable()
        }

        this.json = ko.dependentObservable(function () {
            return ko.toJSON(this.fields);
        }, this);

        function createComplexListItem(text, value) {
            return { text: text, value: value };
        }
    }

    $(function () {
        ko.applyBindings(vm);
    })

</script>


@if (false)
{
    <script src="/Scripts/jquery-1.5.1.min.js" type="text/javascript"></script>
    <script src="/Scripts/modernizr-1.7.min.js" type="text/javascript"></script>
    <script src="/Scripts/knockout-1.3.0beta.debug.js" type="text/javascript"></script>
    <script src="/Scripts/cog.js" type="text/javascript"></script>
    <script src="/Scripts/knockout.mapping-latest.debug.js" type="text/javascript"></script>
}
